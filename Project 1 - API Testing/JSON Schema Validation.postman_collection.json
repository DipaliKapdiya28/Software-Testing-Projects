{
	"info": {
		"_postman_id": "fed1a04b-0d6e-4161-a96f-1ac4a0cbabd7",
		"name": "JSON Schema Validation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33657922",
		"_collection_link": "https://www.postman.com/spaceflight-pilot-80981358/workspace/rest-api-testing/collection/33657922-fed1a04b-0d6e-4161-a96f-1ac4a0cbabd7?action=share&source=collection_link&creator=33657922"
	},
	"item": [
		{
			"name": "Create Person",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const Ajv = require(\"ajv\");\r",
							"const ajv = new Ajv();\r",
							"\r",
							"pm.test(\"JSON Schema validation\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"$id\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"title\": \"Core schema meta-schema\",\r",
							"    \"definitions\": {\r",
							"        \"schemaArray\": {\r",
							"            \"type\": \"array\",\r",
							"            \"minItems\": 1,\r",
							"            \"items\": { \"$ref\": \"#\" }\r",
							"        },\r",
							"        \"nonNegativeInteger\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"minimum\": 0\r",
							"        },\r",
							"        \"nonNegativeIntegerDefault0\": {\r",
							"            \"allOf\": [\r",
							"                { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r",
							"                { \"default\": 0 }\r",
							"            ]\r",
							"        },\r",
							"        \"simpleTypes\": {\r",
							"            \"enum\": [\r",
							"                \"array\",\r",
							"                \"boolean\",\r",
							"                \"integer\",\r",
							"                \"null\",\r",
							"                \"number\",\r",
							"                \"object\",\r",
							"                \"string\"\r",
							"            ]\r",
							"        },\r",
							"        \"stringArray\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": { \"type\": \"string\" },\r",
							"            \"uniqueItems\": true,\r",
							"            \"default\": []\r",
							"        }\r",
							"    },\r",
							"    \"type\": [\"object\", \"boolean\"],\r",
							"    \"properties\": {\r",
							"        \"$id\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"uri-reference\"\r",
							"        },\r",
							"        \"$schema\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"uri\"\r",
							"        },\r",
							"        \"$ref\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"uri-reference\"\r",
							"        },\r",
							"        \"$comment\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"title\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"description\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"default\": true,\r",
							"        \"readOnly\": {\r",
							"            \"type\": \"boolean\",\r",
							"            \"default\": false\r",
							"        },\r",
							"        \"examples\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": true\r",
							"        },\r",
							"        \"multipleOf\": {\r",
							"            \"type\": \"number\",\r",
							"            \"exclusiveMinimum\": 0\r",
							"        },\r",
							"        \"maximum\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"exclusiveMaximum\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"minimum\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"exclusiveMinimum\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"maxLength\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r",
							"        \"minLength\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r",
							"        \"pattern\": {\r",
							"            \"type\": \"string\",\r",
							"            \"format\": \"regex\"\r",
							"        },\r",
							"        \"additionalItems\": { \"$ref\": \"#\" },\r",
							"        \"items\": {\r",
							"            \"anyOf\": [\r",
							"                { \"$ref\": \"#\" },\r",
							"                { \"$ref\": \"#/definitions/schemaArray\" }\r",
							"            ],\r",
							"            \"default\": true\r",
							"        },\r",
							"        \"maxItems\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r",
							"        \"minItems\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r",
							"        \"uniqueItems\": {\r",
							"            \"type\": \"boolean\",\r",
							"            \"default\": false\r",
							"        },\r",
							"        \"contains\": { \"$ref\": \"#\" },\r",
							"        \"maxProperties\": { \"$ref\": \"#/definitions/nonNegativeInteger\" },\r",
							"        \"minProperties\": { \"$ref\": \"#/definitions/nonNegativeIntegerDefault0\" },\r",
							"        \"required\": { \"$ref\": \"#/definitions/stringArray\" },\r",
							"        \"additionalProperties\": { \"$ref\": \"#\" },\r",
							"        \"definitions\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": { \"$ref\": \"#\" },\r",
							"            \"default\": {}\r",
							"        },\r",
							"        \"properties\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": { \"$ref\": \"#\" },\r",
							"            \"default\": {}\r",
							"        },\r",
							"        \"patternProperties\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": { \"$ref\": \"#\" },\r",
							"            \"propertyNames\": { \"format\": \"regex\" },\r",
							"            \"default\": {}\r",
							"        },\r",
							"        \"dependencies\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": {\r",
							"                \"anyOf\": [\r",
							"                    { \"$ref\": \"#\" },\r",
							"                    { \"$ref\": \"#/definitions/stringArray\" }\r",
							"                ]\r",
							"            }\r",
							"        },\r",
							"        \"propertyNames\": { \"$ref\": \"#\" },\r",
							"        \"const\": true,\r",
							"        \"enum\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": true,\r",
							"            \"minItems\": 1,\r",
							"            \"uniqueItems\": true\r",
							"        },\r",
							"        \"type\": {\r",
							"            \"anyOf\": [\r",
							"                { \"$ref\": \"#/definitions/simpleTypes\" },\r",
							"                {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": { \"$ref\": \"#/definitions/simpleTypes\" },\r",
							"                    \"minItems\": 1,\r",
							"                    \"uniqueItems\": true\r",
							"                }\r",
							"            ]\r",
							"        },\r",
							"        \"format\": { \"type\": \"string\" },\r",
							"        \"contentMediaType\": { \"type\": \"string\" },\r",
							"        \"contentEncoding\": { \"type\": \"string\" },\r",
							"        \"if\": {\"$ref\": \"#\"},\r",
							"        \"then\": {\"$ref\": \"#\"},\r",
							"        \"else\": {\"$ref\": \"#\"},\r",
							"        \"allOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r",
							"        \"anyOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r",
							"        \"oneOf\": { \"$ref\": \"#/definitions/schemaArray\" },\r",
							"        \"not\": { \"$ref\": \"#\" }\r",
							"    },\r",
							"    \"default\": true\r",
							"}\r",
							"\r",
							"const validate = ajv.compile(schema) //expected data\r",
							"const valid = validate(jsonData) //actual data\r",
							"if (!valid) console.log(validate.errors)\r",
							"\r",
							"pm.expect(valid).to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Dipali\",\r\n    \"lastName\": \"Kapadiya\",\r\n    \"age\": 26,\r\n    \"address\": \"Ahmedabad\",\r\n    \"phoneNumbers\": \"123-456-78910\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/persons",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"persons"
					]
				}
			},
			"response": []
		}
	]
}